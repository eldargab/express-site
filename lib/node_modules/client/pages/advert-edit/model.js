module.exports = {
    call: function (method, var_args) {
        var args = Array.prototype.slice.call(arguments, 1);

        for (var key in this) {
            var prop = this[key];
            var type = typeof prop;
            var isObject = type == 'function' || type == 'object';
            if (prop != null && isObject && prop[method]) 
                prop[method].apply([prop].concat(args));
        } 
    },

    reset: function () {
        this.call('reset');
    },

    hasError: function () {
        for (var key in this) {
            var prop = this[key];
            var type = typeof prop;
            var isObject = type == 'function' || type == 'object';
            if (prop != null && isObject && prop.hasError && prop.hasError())
                return true;
        }
        return false;
    }
}
