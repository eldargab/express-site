module.exports = {
    visitNodes: function (visit) {
        var self = this;
        visitNodes(this, function (obj) {
            if (self !== obj) return visit(obj);
        });
    },

    call: function (method, onresult, var_args) {
        onresult = onresult || returnStop;
        var args = Array.prototype.slice.call(arguments, 2);

        this.visitNodes(function (node) {
            var fn = node[method];
            if (!fn) return;
            return onresult(fn.apply(node, args));
        });
    }
}

function returnStop () {
    return 'stop';
}

function visitNodes (obj, visit) {
    if (canNotHaveProps(obj)) return;
    var stop = visit(obj);
    if (stop) return stop;
    for (var key in obj) {
        stop = visitNodes(obj[key], visit);
        if (stop == 'end') return 'end';
    }
}

function canNotHaveProps (obj) {
    var type = typeof obj;
    return !(obj != null && (type == 'function' || type == 'object'));
}
