var P = require('./port');

exports.toJSON = function toJSON (obj) {
    var type = getType(obj);
    if (canNotHaveProperties(type)) return obj;

    if (obj.toJSON) return obj.toJSON();

    if (type == 'function') 
        return P.isPort(obj) ? toJSON(obj()) : undefined;

    if (Array.isArray(obj)) {
        var ta = [];
        obj.forEach(function (val, index) {
           ta[index] = toJSON(val);
        })
        return ta;
    }

    var t = {}
    for (var key in obj) {
        var val = toJSON(obj[key]);
        if (val !== undefined)
            t[key] = val;
    }
    return t;
}

exports.setJSON = function (obj, json) {
    set({root: obj}, 'root', json);
    return obj;
}

function set (obj, key, value) {
    var prop = obj[key];

    if (canNotHaveProperties(getType(prop))) {
        obj[key] = value;
        return;
    }

    if (prop.setJSON) {
        prop.setJSON(value);
        return;
    }

    if (P.isPort(prop)){
        prop(value);
        return;
    } 
    
    if(canNotHaveProperties(getType(value))) {
        obj[key] = value;
        return;
    }

    for (var k in value) {
        set(prop, k, value[k]);
    }
}

function getType (obj) {
    return obj === null ? 'null' : typeof obj;
}

function canNotHaveProperties (type) {
    switch (type) {
        case 'object':
        case 'function':
            return false;
    }
    return true;
}
