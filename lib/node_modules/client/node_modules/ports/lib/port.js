var EE = require('./event-emitter').prototype;
var PortEventEmitter = extend({
    addListener: function (l) {
        return this.on('change', l);
    },

    removeListeners: function () {
        return this.removeAllListeners('change');
    },

    removeListener: function (l) {
        return EE.removeListener.call(this, 'change', l);
    },

    onchange: function () {
        return this.emit('change');
    }
}, Object.create(EE)); 

exports.Events = PortEventEmitter;

exports.create = function createPort (setter, getter) {
    function port (val) {
        if (arguments.length == 0)
            return getter.call(this);
        setter.call(this, val);
    }

    port.__is_port = true;
    
    return port;
}

exports.createListenable = function createListenable (setter, getter) {
    var port = exports.create(setter, getter);
    
    extend(PortEventEmitter, port);

    return port;
}

exports.isPort = function (obj) {
    return typeof obj == 'function' && obj.__is_port;
}

exports.link = function (src, target) {
    if (src.addListener) {
        src.addListener(function () {
            target(src());
        });
    }
    target(src());
}

exports.linkTwoWay = function (src, target) {
    if (!target.on) return exports.link(src, target);
    if (!src.on) return exports.link(target, src);

    var updating = false;

    function updater (src, target) {
        return function () {
            if (updating) return;
            updating = true;
            target(src());
            updating = false;
        }
    }

    target(src());

    src.addListener(updater(src, target));

    target.addListener(updater(target, src));
}

function extend (src, target) {
    for (var key in src) {
        target[key] = src[key];
    }
    return target;
}
