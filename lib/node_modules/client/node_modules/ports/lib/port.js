exports.create = function createPort (setter, getter) {
    function port (val) {
        if (arguments.length == 0)
            return getter.call(this);
        setter.call(this, val);
    }

    port.__is_port = true;
    
    return port;
}

exports.createListenable = function createListenable (setter, getter, events) {
    var port = exports.create(setter, getter);

    port.listen = function (cb) {
        events.on('change', cb, port);
    }

    port.removeListener = function (cb) {
        events.off('change', cb);
    }

    port.removeListeners = function () {
        events.off('change');
    }

    return port;
}

exports.isPort = function (obj) {
    return typeof obj == 'function' && obj.__is_port;
}

exports.link = function (src, target) {
    if (src.listen) {
        src.listen(function () {
            target(src());
        });
    }
    target(src());
}

exports.linkTwoWay = function (src, target) {
    if (!target.listen) return exports.link(src, target);
    if (!src.listen) return exports.link(target, src);

    var updating = false;

    function updater (src, target) {
        return function () {
            if (updating) return;
            updating = true;
            target(src());
            updating = false;
        }
    }

    target(src());

    src.listen(updater(src, target));

    target.listen(updater(target, src));
}

exports.computable = function computable (fn, var_deps) {
    var events = Object.create(Backbone.Events);
    var port = exports.createListenable(noop, fn, events);
    var deps = Array.prototype.slice.call(arguments, 1);

    deps.forEach(function (dep) {
        if (!dep.listen) return;
        dep.listen(function () {
            events.trigger('change');
        });
    })

    return port;
}

function noop () {}
