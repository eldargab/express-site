module.exports = EventEmitter;
    
function EventEmitter () { }

EventEmitter.prototype.on = function (name, fn) {
    if (!this._events) {
        this._events = {};
    }

    if (!this._events[name]) {
        this._events[name] = fn;
    } else if (Array.isArray(this._events[name])) {
        this._events[name].push(fn);
    } else {
        this._events[name] = [this._events[name], fn];
    }

    return this;
}

EventEmitter.prototype.addListener = EventEmitter.prototype.on;

EventEmitter.prototype.once = function (name, fn) {
    var self = this;

    function on () {
        self.removeListener(name, on);
        fn.apply(this, arguments);
    }

    this.on(name, on);

    return this;
}

EventEmitter.prototype.removeListener = function (name, fn) {
    if (this._events && this._events[name]) {
        var list = this._events[name];

        if (Array.isArray(list)) {
            var pos = -1;

            for (var i = 0, l = list.length; i < l; i++) {
                if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
                    pos = i;
                    break;
                }
            }

            if (pos < 0) {
                return this;
            }

            list.splice(pos, 1);

            if (!list.length) {
                delete this._events[name];
            }
        } 
        else if (list === fn || (list.listener && list.listener === fn)) {
            delete this._events[name];
        }
    }

    return this;
}

EventEmitter.prototype.removeAllListeners = function (name) {
    if (name === undefined) {
        this._events = null;
        return this;
    }

    if (this._events && this._events[name]) {
        this._events[name] = null;
    }

    return this;
}

EventEmitter.prototype.emit = function (name) {
    if (!this._events) return false;

    var handler = this._events[name];

    if (!handler) return false;

    var args = Array.prototype.slice.call(arguments, 1);

    if ('function' == typeof handler) {
        handler.apply(this, args);
    } else if (Array.isArray(handler)) {
        var listeners = handler.slice();

        for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i].apply(this, args);
        }
    } else {
        return false;
    }

    return true;
}
