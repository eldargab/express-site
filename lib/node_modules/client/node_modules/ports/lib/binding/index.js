var extend = require('../util').extend;
var _maker = require('./ports-maker');
var domParser = require('./dom-parser');

var builtInPorts = require('../dom');
var builtInFilters = {
    not: require('../conversion-exit')(not, not)
}

exports.linker = require('./linker');

exports.portsMaker = createMaker(builtInPorts, builtInFilters);

exports.jqueryPlugin = function (linker, maker) {
    linker = linker || exports.linker;
    maker = maker || exports.portsMaker;
    return function (link, types, filters) {
        link = typeof link == 'function' ? link : linker(link);
        var visitElement = maker(link, types, filters);
        return this.each(function () {
            visitElement(this);
        });
    }
}

function createMaker (builtInPorts, builtInFilters) {
    function maker (link, types, filters) {
        types = mix(types, builtInPorts);
        filters = mix(filters, builtInFilters);
        var make = _maker(types, filters, link);
        return domParser(make);
    }

    maker.extendBuiltIn = function (types, filters) {
        return createMaker(
            mix(types, builtInPorts), 
            mix(filters, builtInFilters)
        );
    }

    return maker;
}

function mix (o1, o2) {
    if (!o1) return o2;
    var ret = {};
    extend(ret, o2);
    extend(ret, o1);
    return ret;
}

function not (val) {
    return !val;
}
