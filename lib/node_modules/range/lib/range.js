var R = module.exports;

R.Interval = function (low, high) {
    var i = {
        low: low,
        high: high
    }
    if (i.low == i.high) return i.low;
    if (i.low > i.high) 
        throw new Error('В диапазоне ' + i.low + ' - ' + i.high + ' верхняя граница меньше нижней');
    return i;
}

R.union = function (r1, r2) {
    return simplifyUnion([].concat(r1, r2));
}

R.getType = function (r) {
    if (Array.isArray(r)) return 'union';
    if (typeof r == 'object') return 'interval';
    return 'value';
}

R.apply = function (r, method) {
    return method[R.getType(r)](r);
}

var toString = {
    value: function (r) {
        return r != null ? r.toString() : '';
    },
    interval: function (r) {
        if (r.highest != null) {
            return '< ' + r.highest;
        }
        if (r.lowest != null) {
            return '> ' + r.lowest;
        }
        return r.low + ' - ' + r.high;
    },
    union: function (r) {
        return r.map(function (i) {
            return R.apply(i, toString);
        }).join('; ');
    }
}

R.toString = function (r) {
    return R.apply(r, toString);
}

R.parse = function (string) {
    var range = string.replace(/\s*/g, '').split(/;+/g).map(function (s) {        
        if (s == '') return;
        for (var i = 0; i < rangeMatchers.length; i++) {
            var r = rangeMatchers[i](s);
            if (r != null) return r;
        };
        throw new Error('Значение "' + s + '" не удалось преобразовать в число или диапазон');
    });
    return simplifyUnion(range);
}

var rangeMatchers = [
    function matchNumber (r) {
        var num = Number(r);
        return isNaN(num) ? null : num;
    },

    function matchInterval (r) {
        r = r.split(/\-/);
        if (r.length != 2) return;
        return R.Interval(toNumber(r[0]), toNumber(r[1]));
    },

    function matchFrom (r) {
        r = r.trim();
        if (~r.indexOf('>'))
            return { lowest: toNumber(r.slice(1)) }
    },

    function matchUpTo (r) {
        r = r.trim();
        if (~r.indexOf('<'))
            return { highest: toNumber(r.slice(1)) }
    }
]

function toNumber (s) {
    var num = Number(s);
    if (isNaN(num))
        throw new Error('Значение "' + s + '" не удалось преобразовать в число');
    return num;
}

function simplifyUnion (u) {
    return u.length < 2 ? u[0] : u;
}
