#!/usr/bin/env node

var PATH = require('path')
var fs = require('fs')
var path, cwd, cfg

path = process.argv[2] || process.cwd()

if (fs.statSync(path).isDirectory()) {
    cwd = path
    cfg = lookupSiteJson(path)
} else {
    cwd = PATH.dirname(path)
    cfg = JSON.parse(fs.readFileSync(path, 'utf8'))
}

process.chdir(cwd)

require('watch').watchTree('.', {ignoreDotFiles: true}, restart)


var server
var killing = false
var building = false
var rebuild = false

function restart () {
    if (building) {
        rebuild = true
        return
    }

    if (killing) return

    if (!server || server.exitCode != null) return startup()

    killing = true

    server.on('exit', function () {
        killing = false
        startup()
    })

    server.kill()
}

function startup () {
    if (!cfg.build) return startApp()

    building = true
    rebuild = false
    sh(build, function (code) {
        building= false
        if (rebuild) return startup()
        if (code == 0) startApp()
    })
}

function startApp () {
    var cmd = cfg.app
        ? cfg.app
        : ['node', '-e',
            "require('express-site')().listen(process.env.port || 3000);" +
            "console.log('Site http://localhost:3000 launched for " + path + "');"
        ]
    server = sh(cmd)
}

function lookupSiteJson (dir) {
    var files = fs.readdirSync(dir).filter(function (itm) {
        return /site\.json$/.test(itm)
    })
    return files.length == 1
        ? JSON.parse(fs.readFileSync(files[0], 'utf8'))
        : {}
}

function sh (cmd, cb) {
    var child = require('child_process').spawn(cmd.shift(), cmd)
    child.stderr.on('data', function (data) {
        process.stderr.write(data)
    })
    child.stdout.on('data', function (data) {
        process.stdout.write(data)
    })
    if (cb) child.on('exit', cb)
    return child
}