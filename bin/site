#!/usr/bin/env node

var PATH = require('path')
var fs = require('fs')
var path, cwd, cfg

path = process.argv[2] || process.cwd()

if (fs.statSync(path).isDirectory()) {
    cwd = path
    cfg = lookupSiteJson(path)
} else {
    cwd = PATH.dirname(path)
    cfg = JSON.parse(fs.readFileSync(path, 'utf8'))
}

process.chdir(cwd)

cfg.watch = cfg.watch != null ? cfg.watch : ['.']

cfg.watch && cfg.watch.forEach(function (itm) {
    require('watch').watchTree(itm, {ignoreDotFiles: true}, function (f, curr, prev) {
        if (typeof f == 'object' && curr === null && prev === null) {
            // Finished walking the file tree
            return
        }
        restart()
    })
})

restart()


var server
var killing = false
var building = false
var rebuild = false

function restart () {
    if (building) {
        rebuild = true
        return
    }

    if (killing) return

    if (!server || server.exitCode != null) return startup()

    killing = true

    server.on('exit', function () {
        killing = false
        startup()
    })

    server.kill()
}

function startup () {
    if (!cfg.build) return startApp()

    building = true
    rebuild = false
    sh(cfg.build, function (code) {
        building= false
        if (rebuild) return startup()
        if (code == 0) startApp()
    })
}

function startApp () {
    var cmd = cfg.app
        ? cfg.app
        : ['node', '-e', "require('express-site')();"]
    server = sh(cmd)
}

function lookupSiteJson (dir) {
    var files = fs.readdirSync(dir).filter(function (itm) {
        return /site\.json$/.test(itm)
    })
    return files.length == 1
        ? JSON.parse(fs.readFileSync(PATH.join(dir, files[0]), 'utf8'))
        : {}
}

function sh (cmd, cb) {
    var child = require('child_process').spawn(cmd[0], cmd.slice(1))
    child.stderr.on('data', function (data) {
        process.stderr.write(data)
    })
    child.stdout.on('data', function (data) {
        process.stdout.write(data)
    })
    if (cb) child.on('exit', cb)
    return child
}